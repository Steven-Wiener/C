Step 2: Cat
Make a program called strcat that displays the numbers in the file one number per line.
	If the user calls the program incorrectly, print an error message and call exit(1)
	Use fopen(), fscanf(), printf(), and fclose()

Make a program called intcat, written pretty much the same way but with different flags passed to
	open(), read(), and close() instead of fopen(), fscanf(), and fclose()

Step 3: Reverse
Write the integers to a new file in reverse order. 
strrev will take an input file with ASCII integers and produce an output file with those numbers listed in reverse order
	ex. shell% strrev infile.str outfile.str

Also create intrev which does the same, only with binary integers (generated by generate), reversing these and creating a new binary file. Create this first
	ex. shell% intrev infile.int outfile.int
	allocate a large array, read the file into the array, and step through the array backwards, writing the 		reversed results to an output file
	fstat() will find the size of the file
	malloc() will allocate an array of integers of this size
		int *p;
    		p = (int *) malloc(25 * sizeof(int));
    		/* now *p refers to the first int, 
    		 * *(p+1) the second, ..., up to *(p+24) 
    		 */
	Finally step through this array backwards in a loop, printing each integer to a file, one int at a time

For strrev:
	This requires a simple stack to be built
	Every time an integer is read from the file, the integer is pushed into the stack
	Once the EoF is found, open (and create) a new output file, and pop integers off the stack, writing each to the 		file.

Implement each of the push() and pop() operations in its own function. 
	push() takes the int to be pushed and a pointer to the current top of the stack, returning the updated pointer
	pop() takes a pointer to a pointer to the current top of the stack, returning the int value within the node 			being popped. Return 0 if the stack is empty, making sure pop is NOT called if this is the case

Step 4: strtoboth
This reads input from a file in ASCII format and writes out two files. One file is integer (binary) version, the other 		file is a modified version of the ASCII format

	ex. shell% strtoboth infile.str outfile1.int outfile2.str2
	This code will be much like strcat
	The modified version of ACII will inject a space into the output when the value being printed is negative.
    ex. 19877;
	- 125;
	- 3;
	8872;
	strcat should be able to look at this output
